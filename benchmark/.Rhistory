y <- as.matrix(longley[,7])
# fit model
fit <- lars(x, y, type="lasso")
# summarize the fit
summary(fit)
# select a step with a minimum error
best_step <- fit$df[which.min(fit$RSS)]
# make predictions
predictions <- predict(fit, x, s=9, type="fit")$fit
# summarize accuracy
rmse <- mean((y - predictions)^2)
print(rmse)
?lars
?summary.lars
function print.blaa(){print("hey")}
print.blaa <- function(){print("hey")}
b <- 1
class(b) <- "blaa"
print(b)
print.blaa <- function(x){print("hey")}
print(b)
summary(fit)
?predict.lars
?lars
?randomForest
library(randomForest)
?randomForest
library(glm)
df <- iris
model <- glm(Species ~ ., data=iris)
model <- glm(Species ~ ., data=df)
str(df)
df <- df[df$Species!="versicolor"]
df <- df[df$Species!="versicolor",]
df$Species <- droplevels(df$Species)
model <- glm(Species ~ ., data=df)
df
dim(df)
model <- glm(Species ~ ., data=df)
?glm
model <- glm(Species ~ ., data=df)
str(df)
model <- glm(Species ~ Sepal.Length, data=df)
model <- glm(Species ~ ., data=df)
class(df)
model <- glm(df$Species ~ ., data=df)
model <- glm(Species ~ ., data=df)
df
model <- glm(Species ~ ., data=df,family=binomial)
model
predict(model,df)
predict(model,df,type="response")
predict(model,df,type="class")
predict(model,df,type="link")
predict(model,df,type="terms")
model <- glm(Species ~ ., data=df)
df
df$Species <- ifelse(df$Species=="virginica",1,0)
model <- glm(Species ~ ., data=df)
model
train.ind <- sample(nrow(df),60)
model <- glm(Species ~ ., data=df[train.ind,])
preds <- predict(model,df[-train.ind,])
preds
preds <- predict(model,df[-train.ind,],type="response")
pres
preds
preds <- predict(model,df[-train.ind,],type="cl")
preds <- predict(model,df[-train.ind,],type="terms")
preds
preds <- predict(model,df[-train.ind,],type="terms")
preds <- predict(model,df[-train.ind,],type="ter")
preds <- predict(model,df[-train.ind,],type="f")
preds <- predict(model,df[-train.ind,],type="link")
presd
preds
preds <- predict(model,df[-train.ind,],type="response")
preds
preds <- round(preds)
preds
mean(preds==df[-train.ind,"Species"])
sum(preds==df[-train.ind,"Species"])
preds
preds <- predict(model,df[-train.ind,],type="response")
preds
?pROC
library(pROC)
?auc
?roc
r <- roc(response = df[-train.ind,"Species"],pred=preds)
r
plot(r)
r
object(r)
objects(r)
r$auc
for (obj in objects(r)){
print(r[[obj]])
}
?grid.arrange
a = 1:5
b = 6:10
v = stack(a,b)
a*b
?stack
df <- data.frame(a,b)
stack(df)
s = stack(df)
df
class(s)
s
?hcl
hcl(1,2,1)
hcl(0,0,0)
hcl(0,0,1)
hcl(0,0,A)
hcl(0,0,a)
hcl(0,0,A)
hcl(0,0,l=A)
hcl(0,0,l=1)
hcl(0,0,l=)
hcl(0,0,l=2)
hcl(0,0,l=3)
hcl(0,0,l=a)
hcl(0,0,l=B)
hcl(0,0,l=3)
hcl(0,0,l=3,.2)
hcl(0,0,l=3,.3)
hcl(0,0,l=3,4)
hcl(0,0,l=3,1)
?as.raster
# subsetting
r <- as.raster(matrix(colors()[1:100], ncol = 10))
r[, 2]
r[2:4, 2:5]
print(r)
r
b <- as.raster(matrix(hcl(0, 80, seq(50, 80, 10)),
nrow = 4, ncol = 5))
b
print(b)
raster(b)
print(as.raster(b))
print(as.raster(b))
grid.raster(r)
pltRGB(r)
plotRGB(r)
install.packages('raster')
library(raster)
install.packages('raster')
plotRGB(r)
plotRGB(as.raster(r))
?brick
brick(r)
r <- raster(r)
r
?raster
r
plot(r)
m <- matrix(runif(100),nrow=10)
m
m1 <- matrix(runif(100),nrow=10)
m2 <- matrix(runif(100),nrow=10)
r <- raster(hcl(m,m1,m2))
r <- as.raster(hcl(m,m1,m2))
r
plot(r)
dim(r)
r <- as.raster(hcl(m,m1,m2))
dim(m1)
r <- as.raster(hcl(m,m1,m2))
dim(r)
dim(r) <- c(10,10)
r
plot(r)
r
class(r)
r <- as.raster(hcl(m,m1,m2,m2))
plot(r)
dim(r) <- c(10,10)
plot(r)
m
r <- as.raster(hcl(255*m,255*m1,100*m2,m2))
dim(r) <- c(10,10)
plot(r)
setwd(".")
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df <- gather(df,key=time,value=value,2:3)
ggplot(data=df,aes(x=N,y=value, color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1)
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "right") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
pdf("log_time.pdf")
print(f)
dev.off()
f<-ggplot(data=df,aes(x=N^2,y=(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "right") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Time (s)", x="N")
pdf("linear_time.pdf")
print(f)
dev.off()
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df$ratioT = df$interp2 / df$splinterp2
f<-ggplot(data=df,aes(x=N^2,y=(ratioT))) +
geom_line() +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "right") +
theme(legend.position = "bottom") +
labs(title="Relative Speedup", y="Ratio", x="N")
pdf("ratio.pdf")
print(f)
dev.off()
setwd("~/Documents/MATLAB/3d-refine/splinter/benchmark/")
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df <- gather(df,key=time,value=value,2:3)
ggplot(data=df,aes(x=N,y=value, color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1)
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "right") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
pdf("log_time.pdf")
print(f)
dev.off()
f<-ggplot(data=df,aes(x=N^2,y=(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "right") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Time (s)", x="N")
pdf("linear_time.pdf")
print(f)
dev.off()
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df$ratioT = df$interp2 / df$splinterp2
f<-ggplot(data=df,aes(x=N^2,y=(ratioT))) +
geom_line() +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "right") +
theme(legend.position = "bottom") +
labs(title="Relative Speedup", y="Ratio", x="N")
pdf("ratio.pdf")
print(f)
dev.off()
f
setwd("~/Documents/MATLAB/3d-refine/splinter/benchmark/")
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df <- gather(df,key=time,value=value,2:3)
ggplot(data=df,aes(x=N,y=value, color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1)
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
pdf("log_time.pdf")
print(f)
dev.off()
f<-ggplot(data=df,aes(x=N^2,y=(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "right") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Time (s)", x="N")
pdf("linear_time.pdf")
print(f)
dev.off()
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df$ratioT = df$interp2 / df$splinterp2
f<-ggplot(data=df,aes(x=N^2,y=(ratioT))) +
geom_line() +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = "bottom") +
labs(title="Relative Speedup", y="Ratio", x="N")
pdf("ratio.pdf")
print(f)
dev.off()
?theme
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position ="bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
f
ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position ="bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
df
setwd("~/Documents/MATLAB/3d-refine/splinter/benchmark/")
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df <- gather(df,key=time,value=value,2:3)
ggplot(data=df,aes(x=N,y=value, color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1)
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position ="bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
setwd("~/Documents/MATLAB/3d-refine/splinter/benchmark/")
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df <- gather(df,key=time,value=value,2:3)
ggplot(data=df,aes(x=N,y=value, color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1)
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position ="bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
f
pdf("log_time.pdf")
print(f)
dev.off()
setwd("~/Documents/MATLAB/3d-refine/splinter/benchmark/")
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df <- gather(df,key=time,value=value,2:3)
ggplot(data=df,aes(x=N,y=value, color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1)
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position ="bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
pdf("log_time.pdf")
print(f)
dev.off()
f<-ggplot(data=df,aes(x=N^2,y=(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Time (s)", x="N")
pdf("linear_time.pdf")
print(f)
dev.off()
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df$ratioT = df$interp2 / df$splinterp2
f<-ggplot(data=df,aes(x=N^2,y=(ratioT))) +
geom_line() +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = "bottom") +
labs(title="Relative Speedup", y="Ratio", x="N")
pdf("ratio.pdf")
print(f)
dev.off()
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df$ratioT = df$interp2 / df$splinterp2
f<-ggplot(data=df,aes(x=N^2,y=(ratioT))) +
geom_line() +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = "bottom") +
labs(title="Relative Speedup", y="Ratio", x="N")
f
setwd("~/Documents/MATLAB/3d-refine/splinter/benchmark/")
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df <- gather(df,key=time,value=value,2:3)
ggplot(data=df,aes(x=N,y=value, color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1)
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position ="bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
pdf("log_time.pdf")
print(f)
dev.off()
f<-ggplot(data=df,aes(x=N^2,y=(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Time (s)", x="N")
pdf("linear_time.pdf")
print(f)
dev.off()
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df$ratioT = df$interp2 / df$splinterp2
f<-ggplot(data=df,aes(x=N^2,y=(ratioT))) +
geom_line() +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = "bottom") +
labs(title="Relative Speedup", y="Ratio", x="N")
pdf("ratio.pdf")
print(f)
dev.off()
f
setwd("~/Documents/MATLAB/3d-refine/splinter/benchmark/")
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df <- gather(df,key=time,value=value,2:3)
ggplot(data=df,aes(x=N,y=value, color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1)
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position ="bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
pdf("log_time.pdf")
print(f)
dev.off()
f<-ggplot(data=df,aes(x=N^2,y=(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Time (s)", x="N")
pdf("linear_time.pdf")
print(f)
dev.off()
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df$ratioT = df$interp2 / df$splinterp2
f<-ggplot(data=df,aes(x=N^2,y=(ratioT))) +
geom_line() +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = "bottom") +
labs(title="Relative Speedup", y="Ratio", x="N")
pdf("ratio.pdf")
print(f)
dev.off()
f
setwd("~/Documents/MATLAB/3d-refine/splinter/benchmark/")
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df <- gather(df,key=time,value=value,2:3)
ggplot(data=df,aes(x=N,y=value, color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1)
f<-ggplot(data=df,aes(x=N^2,y=log(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position ="bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Log Time (s)", x="N")
pdf("log_time.pdf")
print(f)
dev.off()
f<-ggplot(data=df,aes(x=N^2,y=(value), color=time)) +
geom_line(aes(group=time)) +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = c(.835,.85)) +
labs(title="2D to 1D Bilinear Interpolation Benchmark\n(i7-6800k, 12 threads)", y="Time (s)", x="N")
pdf("linear_time.pdf")
print(f)
dev.off()
df <- read.csv("benchmark_data.csv",col.names=c("N","interp2","splinterp2"))
df$ratioT = df$interp2 / df$splinterp2
f<-ggplot(data=df,aes(x=N^2,y=(ratioT))) +
geom_line() +
scale_colour_brewer(type = "qual", palette = 6, direction = 1, labels=c("MATLAB interp2","C++ splinterp2")) +
theme(legend.position = "bottom") +
#theme(legend.position = "bottom") +
labs(title="Relative Speedup", y="Ratio", x="N")
pdf("ratio.pdf")
print(f)
dev.off()
